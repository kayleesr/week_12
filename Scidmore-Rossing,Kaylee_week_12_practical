# Help from Sam Shedd

# Q1 Use the approach described in Chapter 6.5.1 of ISLR to select the best subset of explanatory variables to predict richness - Note that the approach uses cross-validation - You do not need to include interaction

library(tidyverse)
install.packages("pls")
library(pls)
library(leaps)
survey_data = read_delim("Data/RIKZ.txt", delim = "\t", 
                         escape_double = FALSE, trim_ws = TRUE)


reg_richness = regsubsets(richness ~ ., survey_data_richness, nvmax = 15)
summary_reg_richness = summary(reg_richness)
summary_reg_richness

summary_reg_richness$rsq

plot(summary_reg_richness$rss , xlab = " Number of Variables ",
        ylab = " RSS ", type = "l")

plot(summary_reg_richness$adjr2 , xlab = " Number of Variables ",
        ylab = " Adjusted RSq ", type = "l")


which.max(summary_reg_richness$adjr2)

points(6, summary_reg_richness$adjr2[6], col = " red ", cex = 2,
        pch = 20)

plot(summary_reg_richness$cp, xlab = " Number of Variables ",
      ylab = "Cp", type = "l")

which.min(summary_reg_richness$cp)

points(3, summary_reg_richness$cp[3], col = " red ", cex = 2,
        pch = 20)
which.min(summary_reg_richness$bic)

plot(summary_reg_richness$bic , xlab = " Number of Variables ",
      ylab = " BIC ", type = "l")
points (3, summary_reg_richness$bic[3], col = " red ", cex = 2,
        pch = 20)

?plot.regsubsets
plot(reg_richness, scale = "r2")
plot(reg_richness, scale = "adjr2")
plot(reg_richness, scale = "Cp")
plot(reg_richness, scale = "bic")

coef(reg_richness, 3)

fwd_richness <- regsubsets (richness ~ ., survey_data_richness, nvmax = 15, method = "forward")
summary(fwd_richness)

bwd_richness <- regsubsets (richness ~ ., survey_data_richness, nvmax = 15, method = "backward")
summary(bwd_richness)

coef(reg_richness, 7)
coef(fwd_richness, 7)
coef(bwd_richness, 7)


set.seed(1)
train = sample(c(TRUE, FALSE), nrow(survey_data_richness), replace = TRUE)
test = (!train)

reg_best = regsubsets(richness ~., survey_data_richness[train, ], nvmax=15)

test_mat = model.matrix(richness ~., survey_data_richness[train, ])


val_errors = rep(NA, 14)
for (i in 1:14) {
    coefi = coef(reg_best, id = i)
    pred = test_mat[, names(coefi)] %*% coefi
    val_errors[i] = mean((survey_data_richness$richness[test] - pred)^2)
}
val_errors
which.min(val_errors)

coef(reg_best, 8)

predict.regsubsets = function(object, newdata, id, ...) {
  form = as.formula(object$call[[2]])
  mat = model.matrix(form, newdata)
  coefi = coef(object, id = id)
  xvars = names(coefi)
  mat[, xvars] %*% coefi
}

regfit.best = regsubsets(richness ~., survey_data_richness, nvmax=15)
coef(regfit.best, 8)

k=10
n=nrow(survey_data_richness)
set.seed(1)

folds = sample(rep(1:k, length = n))
cv.errors = matrix(NA, k , 15, dimnames = list(NULL, paste(1:15)))

for (j in 1:k) {
  best.fit = regsubsets(richness ~., survey_data_richness[folds != j, ], nvmax=15)
  for (i in 1:14) {
    pred = predict(best.fit, survey_data_richness[folds ==j, ], id = i)
    cv.errors[j, i] = mean((survey_data_richness$richness[folds == j] - pred)^2)
  }
}

mean.cv.errors = apply(cv.errors, 2, mean)
mean.cv.errors
par(mfrow = c(1,1))
plot(mean.cv.errors, type = "b")

reg.best = regsubsets(richness~., survey_data_richness, nvmax=15)
coef(reg.best, 2)

